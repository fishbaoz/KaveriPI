/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e \$Revision: 281181 $   @e \$Date: 2013-12-18 02:18:55 -0600 (Wed, 18 Dec 2013) $
 *
 */
/*
*****************************************************************************
*
* Copyright 2008 - 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
*
* AMD is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with AMD.  This header does *NOT* give you permission to use the Materials
* or any rights under AMD's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
*
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by AMD shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
*
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
*
* AMD does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by AMD, or
* result from use of the Materials or any related information.
*
* You agree that you will not reverse engineer or decompile the Materials.
*
* NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, AMD retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
*
* U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
* "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
* subject to the restrictions as set forth in FAR 52.227-14 and
* DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
* Government constitutes acknowledgement of AMD's proprietary rights in them.
*
* EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
* direct product thereof will be exported directly or indirectly, into any
* country prohibited by the United States Export Administration Act and the
* regulations thereunder, without the required authorization from the U.S.
* government nor will be used for any purpose prohibited by the same.
* ***************************************************************************
*
*/

DefinitionBlock (
  "PcieAlibSsdtTN.aml",
  "SSDT",
  2,
  "AMD",
  "ALIB",
  0x1
  )
{
  Scope(\_SB) {

    Name (varMaxPortIndexNumber, 6)

    include ("PcieAlibPspp.asl")
    include ("PcieAlibHotplug.asl")
    include ("PcieAlibMmioData.asl")
    include ("PcieAlibPortData.asl")
    include ("PcieAlibPciLib.asl")
    include ("PcieAlibDebugLib.asl")
    include ("PcieAlibCore.asl")
    include ("PcieSmuServiceV4.asl")
    include ("PcieServiceV4.asl")
    include ("PcieSmuVidReqV4.asl")

    /*----------------------------------------------------------------------------------------*/
    /**
     *  Activate LCLK DPM state
     *
     *  Arg0 	- 1 - GEN1 2 - GEN2
     */
    Method (procNbLclkDpmActivate, 1, NotSerialized) {

      Store (procPsppGetAcDcState(), varAcDcStateLocal1)
      Store (0, Local5)

      //DisableLclkDpm;
      procIndirectRegisterRMW (0x0, 0xB8, 0x1F300, 0xfffffffe, 0);
      procNbSmuServiceRequest (9);

      if (LEqual (varAcDcStateLocal1, DEF_PSPP_STATE_AC)) {
        // AC, State 5 + State 6
        // PCIE_CAC_LUT_5 =  0;
        procIndirectRegisterWrite (0x0, 0xB8, 0x1F954, 0)
        //DPM0.Enable = FALSE(state 0)
        //DPM1.Enable = TRUE (state 5)
        //DPM2.Enable = TRUE (state 6)
        procIndirectRegisterRMW (0x0, 0xB8, 0x1F200, 0xfffffffe, 0);
        procIndirectRegisterRMW (0x0, 0xB8, 0x1F2A0, 0xfffffffe, 1);
        procIndirectRegisterRMW (0x0, 0xB8, 0x1F2C0, 0xfffffffe, 1);
        // Enable DPM with DPM1(State5)
        Store (0x50001, Local6)
      } else {
        if (LEqual (Arg0, DEF_LINK_SPEED_GEN1)) {
          // DC + GEN1, State 0 + State 5
          // PCIE_CAC_LUT_5 = SMU:SMC_RAMFLOP_0;
          Store (procIndirectRegisterRead (0x0, 0xB8, 0x1FE00), Local5)
          procIndirectRegisterWrite (0x0, 0xB8, 0x1F954, Local5)
          // DPM0.Enable = TRUE (state 0)
          // DPM1.Enable = TRUE (state 5)
          // DPM2.Enable = FALSE(state 6)
          procIndirectRegisterRMW (0x0, 0xB8, 0x1F200, 0xfffffffe, 1);
          procIndirectRegisterRMW (0x0, 0xB8, 0x1F2A0, 0xfffffffe, 1);
          procIndirectRegisterRMW (0x0, 0xB8, 0x1F2C0, 0xfffffffe, 0);

        } else {
          // DC + GEN2, State 0 + State 6
          // DPM0.Enable = TRUE (state 0)
          // DPM1.Enable = FALSE(state 5)
          // DPM2.Enable = TRUE (state 6)
          procIndirectRegisterRMW (0x0, 0xB8, 0x1F200, 0xfffffffe, 1);
          procIndirectRegisterRMW (0x0, 0xB8, 0x1F2A0, 0xfffffffe, 0);
          procIndirectRegisterRMW (0x0, 0xB8, 0x1F2C0, 0xfffffffe, 1);
        }
        // Enable DPM with DPM0(State0)
        Store (0x00001, Local6)
      }
      //EnableLclkDpm;
      procIndirectRegisterRMW (0x0, 0xB8, 0x1F300, 0xff00fffe, Local6);
      procNbSmuServiceRequest (9);

    }
    /*----------------------------------------------------------------------------------------*/
    /**
     *  Power gate PCIe phy lanes (hotplug support)
     *
     *  Arg0 - Start Lane ID
     *  Arg1 - End Lane ID
     *  Arg2 - Power ON(0) / OFF(1)
     */
    Method (procPcieLanePowerControl, 3, NotSerialized) {
       Store ("PcieLanePowerControl Enter", Debug)

       Store (Concatenate ("  Start Lane ID : ", ToHexString (Arg0), Local6), Debug)
       Store (Concatenate ("  End Lane ID   : ", ToHexString (Arg1), Local6), Debug)
       Store (Concatenate ("  Power ON(0) / OFF(1) : ", ToHexString (Arg2), Local6), Debug)

       if (LGreater (Arg0, Arg1)) {
         Store (Arg1, varStartPhyLaneLocal3)
         Store (Arg0, varEndPhyLaneLocal4)
       } else {
         Store (Arg0, varStartPhyLaneLocal3)
         Store (Arg1, varEndPhyLaneLocal4)
       }
       Store (procIndirectRegisterRead (0x0, 0xB8, 0x1F39C), Local0)
       //Preserve SkipCore(bit 4) & SkipPhy(bit 3)
       And (Local0, 0x00000018, Local0)
       //Arg2 - Power ON(0)
       if (Lequal (Arg2, 0)) {
         // Power On: [31:24 UpperLaneID, 23:16 LowerLaneID, 15:5 Rev, 4 SkipCore, 3 SkipPhy, 2 Core, 1 Tx, 0 Rx]=[Arg1, Arg0, Rev0, preserve SkipCore, preserve SkipPhy, 0, 0, 0]
     	   Or (Or (ShiftLeft (varEndPhyLaneLocal4, 24), ShiftLeft (varStartPhyLaneLocal3, 16)), Or (Local0, 0x3), Local0)

     	   Store (Concatenate ("  Pcie Phy lane power on :", ToHexString (Local0), varStringBuffer), Debug)
       }

        //Arg2 - Power OFF(1)
       if (Lequal (Arg2, 1)) {
         // Power On: [31:24 UpperLaneID, 23:16 LowerLaneID, 15:5 Rev, 4 SkipCore, 3 SkipPhy, 2 Core, 1 Tx, 0 Rx]=[Arg1, Arg0, Rev0, preserve SkipCore, preserve SkipPhy, 0, 1, 1]
     	   Or (Or (ShiftLeft (varEndPhyLaneLocal4, 24), ShiftLeft (varStartPhyLaneLocal3, 16)), Or (Local0, 0x3), Local0)
     	   Store (Concatenate ("  Pcie Phy lane power off :", ToHexString (Local0), varStringBuffer), Debug)
       }
       procIndirectRegisterWrite (0x0, 0xB8, 0x1F39C, Local0)

       //Arg2 - Power ON(0) / OFF(1)
       //Service ID : 0x3 = SMC_MSG_PHY_LN_ON. 0x2 = SMC_MSG_PHY_LN_OFF.
       //So, 0x3 - Arg2 = SeriveId.
       procNbSmuServiceRequest (Subtract (0x3, Arg2))

       Store ("PcieLanePowerControl Exit", Debug)
    }

    /*----------------------------------------------------------------------------------------*/
    /**
     *  Pcie Adjust Pll
     *
     *  Arg0 	- 1 - GEN1 2 - GEN2
     *
     */
    Method (procPcieAdjustPll, 1, NotSerialized) {


    }

    Name (varBapmControl, 0)
    /*----------------------------------------------------------------------------------------*/
    /**
     *  APM/PDM stub
     *
     *  Arg0 - AC/DC state
     *
     */
    Method (procApmPdmActivate, 1, NotSerialized) {
      if (LEqual (varBapmControl, 0)) {
        // If GFX present driver manage BAPM if not ALIB manage BAPM
        if (LEqual (procPciDwordRead (0x08, 0x00), 0xffffffff)) {
          And (procIndirectRegisterRead (0x0, 0xB8, 0x1F428), 0x2, Local1);
          // check if BAPM was enable during BIOS post
          if (LEqual (Local1, 0x2)) {
            Store (1, varBapmControl)
          }
        }
      }
      if (LEqual (varBapmControl,1)) {
        if (LEqual (Arg0,DEF_PSPP_STATE_AC)) {
          // Enable BAPM on AC
          Store (32, Local0)
        } else {
          // Disable BAPM on DC
          Store (33, Local0)
        }
        procNbSmuServiceRequest (Local0);
      }
    }

    /*----------------------------------------------------------------------------------------*/
    /**
     *  Report PCIe PHY speed CAP
     *
     *
     *
     */
    Method (procReportPhySpeedCap, 0) {
      Store (0, varPortIndex)
      Store (0, varGen2PhyLaneBitmapLocal1)
      while (LLessEqual (varPortIndex, varMaxPortIndexNumber)) {
        if (LEqual (procChecPortAllocated(varPortIndex), DEF_PORT_NOT_ALLOCATED)) {
          Increment (varPortIndex)
//          continue
        } else {
          if (LEqual (DerefOf (Index (varCurrentLinkSpeed, varPortIndex)), DEF_LINK_SPEED_GEN2)) {
            Or (procGetPhyLaneBitmap (varPortIndex), varGen2PhyLaneBitmapLocal1, varGen2PhyLaneBitmapLocal1)
          }
          Increment (varPortIndex)
        }
      }
      Store (ShiftLeft(varGen2PhyLaneBitmapLocal1, 24), varReportLaneBitmapLocal2)
      Or (And (ShiftRight(varGen2PhyLaneBitmapLocal1, 8), 0xff00), varReportLaneBitmapLocal2, varReportLaneBitmapLocal2)
      Or (And (ShiftLeft(varGen2PhyLaneBitmapLocal1, 8), 0xff0000), varReportLaneBitmapLocal2, varReportLaneBitmapLocal2)
      procIndirectRegisterWrite (0x0, 0xB8, 0x1F610, varReportLaneBitmapLocal2);
      procNbSmuServiceRequest (0x8);
    }

    /*----------------------------------------------------------------------------------------*/
    /**
     *  Get Phy Lane bitmap
     *
     *  Arg0 - Port Index
     *
     */
    Method (procGetPhyLaneBitmap, 1) {
      Store (procPcieGetPortInfo (Arg0), Local7)
      Store (DerefOf (Index (Local7, DEF_OFFSET_START_PHY_LANE)), varStartPhyLane)
      Store (DerefOf (Index (Local7, DEF_OFFSET_END_PHY_LANE)), varEndPhyLane)
      Store (DerefOf (Index (Local7, DEF_OFFSET_START_CORE_LANE)), varStartCoreLane)
      Store (DerefOf (Index (Local7, DEF_OFFSET_END_CORE_LANE)), varEndCoreLane)

      // Get Warpper ID
      Store (
        Or (ShiftLeft (DerefOf (Index (Local7, Add (DEF_OFFSET_WRAPPER_ID, 1))), 8), DerefOf (Index (Local7, DEF_OFFSET_WRAPPER_ID))),
        varWrapperId
      )
      // Get bitmap of active core lane for port
      Store (procIndirectRegisterRead (0x0, 0xE0, Or (ShiftLeft (varWrapperId, 16), 0x8023)), varLaneMuxLaneBitmapLocal5);
      ShiftRight (varLaneMuxLaneBitmapLocal5, varStartCoreLane, varLaneMuxLaneBitmapLocal5)
      ShiftLeft (1, Add (Subtract (varEndCoreLane, varStartCoreLane), 1), varTempLocal2)
      Subtract (varTempLocal2, 1, varTempLocal2)
      // varLaneMuxLaneBitmapLocal5 - lane bitmap of port core lanes
      And (varLaneMuxLaneBitmapLocal5, varTempLocal2, varLaneMuxLaneBitmapLocal5)
      // Get phy lane bitmap
      if (LGreater (varStartPhyLane, varEndPhyLane)) {
        Store (varEndPhyLane, varLoPhyLaneLocal3)
        Store (varStartPhyLane, varHiPhyLaneLocal4)
        Subtract (Subtract (varEndCoreLane, varStartCoreLane), Subtract (varHiPhyLaneLocal4, varLoPhyLaneLocal3), varTempLocal1)
      } else {
        Store (varEndPhyLane, varHiPhyLaneLocal4)
        Store (varStartPhyLane, varLoPhyLaneLocal3)
        Store (0, varTempLocal1)
      }
      // varTempLocal1 -  offset for PHY lane bitmap to match core lane bitmap
      ShiftLeft (1, Add (Subtract (varHiPhyLaneLocal4, varLoPhyLaneLocal3), 1), varTempLocal2)
      // varTempLocal2 - phy lane bitmap
      ShiftLeft(Subtract (varTempLocal2, 1), varTempLocal1,  varTempLocal2)
      // Adjust PHY lane bitmap with of enabled lanes
      And (varTempLocal2, Not (varLaneMuxLaneBitmapLocal5), varTempLocal2)
      ShiftLeft (Subtract (varTempLocal2, 1), Subtract (varLoPhyLaneLocal3, varTempLocal1), varResultLocal2)
      return (varResultLocal2)
    }

    Name (varRestoreNbps, 0)
    Name (varRestoreNbDpmState, 0)
    /*----------------------------------------------------------------------------------------*/
    /**
     *  _WAK
     *
     *
     *
     */
    Method (AWAK, 1) {
      if (LEqual (Arg0, 3)) {
        // Clear D18F5x170 [SwNbPstateLoDis] only if it was 0 in APTS
        if (LEqual (varRestoreNbps, 1)) {
          Store (procPciDwordRead (0xC5, 0x170), Local0)
          procPciDwordWrite (0xC5, 0x170, And (Local0, Not (ShiftLeft (1, 14))))
           Store (0, varRestoreNbps);
        }
        if (LEqual (varRestoreNbDpmState, 1)) {
          Store (procIndirectRegisterRead (0x0, 0xB8, 0x1F428), Local0)
          procIndirectRegisterWrite (0x0, 0xB8, 0x1F428, Or (Local0, ShiftLeft (1, 5)))
          procNbSmuServiceRequest (22);
          Store (0, varRestoreNbDpmState)
        }
      }
      Store (procPsppGetAcDcState(), varAcDcStateLocal1)
      procApmPdmActivate (varAcDcStateLocal1);
    }
    /*----------------------------------------------------------------------------------------*/
    /**
     *  _PTS
     *
     *
     *
     */
    Method (APTS, 1) {
      if (LEqual (Arg0, 3)) {
         procApmPdmActivate (DEF_PSPP_STATE_DC);
         // Disable NBDPM
         Store (procIndirectRegisterRead (0x0, 0xB8, 0x1F428), Local0)
         if (LNotEqual (And (Local0, ShiftLeft (1, 5)), 0)) {
           // NBDPM enabled lets disable it
           procIndirectRegisterWrite (0x0, 0xB8, 0x1F428, And (Local0, Not (ShiftLeft (1, 5))))
           procNbSmuServiceRequest (22);
           // Indicate needs to restore NBDPM
           Store (1, varRestoreNbDpmState);
         }
         // Save state of D18F5x170 [SwNbPstateLoDis]
         Store (procPciDwordRead (0xC5, 0x170), Local0)
         if (LEqual (And (Local0, ShiftLeft (1, 14)), 0)) {
          // Set D18F5x170 [SwNbPstateLoDis] = 1
          procPciDwordWrite (0xC5, 0x170, Or (Local0, ShiftLeft (1, 14)))
           Store (1, varRestoreNbps);
         }
         Store (procIndirectRegisterRead (0x0, 0x60, 0xF4), varPsppScratchLocal2)
         And (varPsppScratchLocal0, Not (DEF_PSPP_POLICY_START), varPsppScratchLocal2)
         procIndirectRegisterWrite (0x0, 0x60, 0xF4, varPsppScratchLocal2)
      }
    }
  } //End of Scope(\_SB)
}   //End of DefinitionBlock


