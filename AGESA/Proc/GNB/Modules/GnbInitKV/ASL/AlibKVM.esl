/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e \$Revision: 61089 $   @e \$Date: 2011-10-31 10:31:02 -0700 (Mon, 31 Oct 2011) $
 *
 */
/*
*****************************************************************************
*
* Copyright 2008 - 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
*
* AMD is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with AMD.  This header does *NOT* give you permission to use the Materials
* or any rights under AMD's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
*
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by AMD shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
*
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
*
* AMD does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by AMD, or
* result from use of the Materials or any related information.
*
* You agree that you will not reverse engineer or decompile the Materials.
*
* NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, AMD retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
*
* U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
* "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
* subject to the restrictions as set forth in FAR 52.227-14 and
* DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
* Government constitutes acknowledgement of AMD's proprietary rights in them.
*
* EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
* direct product thereof will be exported directly or indirectly, into any
* country prohibited by the United States Export Administration Act and the
* regulations thereunder, without the required authorization from the U.S.
* government nor will be used for any purpose prohibited by the same.
* ***************************************************************************
*
*/

DefinitionBlock (
  "ALIB.aml",
  "SSDT",
  2,
  "AMD",
  "ALIB",
  0x2
  )
{
  Scope(\_SB) {
    //-----------------------------------------------------------------
    // Transfer data
    //-----------------------------------------------------------------
    Name (PcieBaseAddress, 0xffffffff)
    //-----------------------------------------------------------------
    Name (ADBG, Buffer (256) {})
    //-----------------------------------------------------------------
    // Transfer data block
    //-----------------------------------------------------------------
    include ("DataBlock.asl")
    //-----------------------------------------------------------------
    // ALIB interface
    //-----------------------------------------------------------------
    include ("Alib.asl")
    //-----------------------------------------------------------------
    // Hotplug API
    //-----------------------------------------------------------------
    External(\_SB.ALIC,  MethodObj)
    include ("Hotplug.asl")
    //-----------------------------------------------------------------
    // ACDC objects
    //-----------------------------------------------------------------
    include ("Acdc.asl")
    //-----------------------------------------------------------------
    // PSPP objects
    //-----------------------------------------------------------------
    include ("Pspp.asl")
    //-----------------------------------------------------------------
    // CPU servcies
    //-----------------------------------------------------------------
    include ("CpuRegistersKV.asl")
    //-----------------------------------------------------------------
    // GNB services
    //-----------------------------------------------------------------
    include ("GnbRegistersKV.asl")
    include ("GnbPcieKV.asl")
    include ("GnbKV.asl")
    //-----------------------------------------------------------------
    // SB servcies
    //-----------------------------------------------------------------
    include ("SbLib.asl")
    //-----------------------------------------------------------------
    // PCIe topology
    //-----------------------------------------------------------------
    include ("PcieTopologyKV.asl")

  /*----------------------------------------------------------------------------------------*/
  /**
   *  AC/DC change event handler
   *
   *  PCIe speed cap can be recovered from PcieCurrentSpeed
   */
    Name (varNbdpmStatus, ON)
    Name (varBapmStatus, ON)
    Name (varSwNbPstateLoDis, 0)
    Name (varGnbIoapicSb, 0)

    Method (APTS, 1) {
      if (LEqual (Arg0, 3)) {
        //
        // Put BAPM to sleep
        //
        //procBapmManage (DC)
        //
        // Prepare NBDPM to sleep
        //
        //Store (procGnbNbdpmControl (OFF), varNbdpmStatus)
        //
        // Prepare Mem pstate
        //
        //Store (procMemePSManage (OFF), varSwNbPstateLoDis)
        //
        // Save Gnb Ioapic Feature Cntl
        //
        Store (procGnbIoapicFeat (OFF), varGnbIoapicSb)
      }

    }
  /*----------------------------------------------------------------------------------------*/
  /**
   *  AC/DC change event handler
   *
   *  PCIe speed cap can be recovered from PcieCurrentSpeed
   */
    Method (AWAK, 1) {
      if (LEqual (Arg0, 3)) {
        //
        // Put BAPM back
        //
        //procBapmManage (AcDc)
	
        //
        // Wake Mem PS
        //
        if (LEqual (varSwNbPstateLoDis, 0)) {
//          procMemePSManage (ON)
        } else {
//          procMemePSManage (OFF)
        }
        //
        // Restore Gnb Ioapic Feature Sb bit
        //
        if (LEqual (varGnbIoapicSb, ON)) {
          procGnbIoapicFeat (ON)
        } else {
          procGnbIoapicFeat (OFF)
        }
      }
      if (LOr (LEqual (Arg0, 3), LEqual (Arg0, 4))) {
        procPsppWake (Arg0)
      }
    }
  /*----------------------------------------------------------------------------------------*/
  /**
   *  AC/DC change event handler
   *
   *  PCIe speed cap can be recovered from PcieCurrentSpeed
   */
    Method (procAcDcChangeEvent, 0) {
      //
      // Process PSPP
      //
      procPsppAcDc ()
      //
      // Process LCLK DPM
      //
      procLclkDpmManage (PcieCurrentSpeed, AcDc)
      //
      // Process APM
      //
      procApmManage (AcDc)
      //
      // Process BAPM
      //
      procBapmManage (AcDc)
    }
  /*----------------------------------------------------------------------------------------*/
  /**
   *  PCIe speed change event handler
   *
   *  AC/DC state can be recovered from AcDc.
   *
   *  Arg0 - Target PCIe speed, Arg0 - Current link speed
   */
    Method (procPcieSpeedChangeEvent, 2) {
      //
      // Process LCLK DPM
      //
      procLclkDpmManage (Arg0, AcDc)
    }



    Name (varApmManageStatus, OFF)
    Name (varIntMonPC6En, 0)
  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage APM
   *
   *
   *  Arg0 - AC/DC
   */
    Method (procApmManage, 1) {
      if (LEqual (varApmManageStatus, OFF)) {
        Store (bfIntMonPC6En, varIntMonPC6En)
        Store (ON, varApmManageStatus)
      }
      if (LEqual (varIntMonPC6En, 0x1)) {
        if (LEqual (Arg0, AC)) {
          // Disable CC6 on AC
          Store (0x0, bfIntMonPC6En)
          ALIB_DEBUG (" APM OFF!!!")
        } else {
          //Enable CC6 on DC
          Store (0x1, bfIntMonPC6En)
          ALIB_DEBUG (" APM ON!!!")
        }
      }
    }


  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage LCLK
   *
   *
   *  Arg0 - target link speed
   *  Arg1 - AC/DC
   */
    Method (procLclkDpmManage, 2) {
      //Store (0, bfLclkDpmEn)
      //procGnbSmuServiceReq (9, 0)
      if (LEqual (Arg1, AC)) {
        ALIB_DEBUG (" LCLK DPM State 0 [OFF], State 5 [ON], State 6 [ON]")
      } else {
        if (LEqual (Arg0, GEN1)) {
          ALIB_DEBUG (" LCLK DPM State 0 [ON], State 5 [ON], State 6 [OFF]")
        } else {
          ALIB_DEBUG (" LCLK DPM State 0 [ON], State 5 [OFF], State 6 [ON]")
        }
      }
      //Store (1, bfLclkDpmEn)
      //procGnbSmuServiceReq (9, 0)
    }
  } //End of Scope(\_SB)
}   //End of DefinitionBlock


