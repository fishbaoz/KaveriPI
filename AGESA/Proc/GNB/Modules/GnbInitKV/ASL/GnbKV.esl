/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e \$Revision: 61089 $   @e \$Date: 2011-10-31 10:31:02 -0700 (Mon, 31 Oct 2011) $
 *
 */
/*
*****************************************************************************
*
* Copyright 2008 - 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
*
* AMD is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with AMD.  This header does *NOT* give you permission to use the Materials
* or any rights under AMD's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
*
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by AMD shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
*
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
*
* AMD does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by AMD, or
* result from use of the Materials or any related information.
*
* You agree that you will not reverse engineer or decompile the Materials.
*
* NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, AMD retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
*
* U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
* "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
* subject to the restrictions as set forth in FAR 52.227-14 and
* DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
* Government constitutes acknowledgement of AMD's proprietary rights in them.
*
* EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
* direct product thereof will be exported directly or indirectly, into any
* country prohibited by the United States Export Administration Act and the
* regulations thereunder, without the required authorization from the U.S.
* government nor will be used for any purpose prohibited by the same.
* ***************************************************************************
*
*/

  /*----------------------------------------------------------------------------------------*/
  /**
   *  SMU Service request
   *
   *  Arg0 - Smu service ID
   *  Arg1 - Smu service parameters
   *
   */

  Method (procGnbSmuServiceReq, 2, Serialized) {
    ALIB_DEBUG (" GnbSmuServiceReq Enter")
    ALIB_DEBUG (Concatenate ("  Smu service id = ", ToHexString (Arg0), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument = ", ToHexString (Arg1), ADBG))
    while (LNotEqual (bfIntDone, 1)) {
      ALIB_DEBUG ("--Wait Init Done--")
    }

    Store (Arg1, bfIntArg)
    
    Store (bfService_Toggle, Local1)
    Not (Local1, Local1)
    And (Local1, 0x1, Local1)
    
    Store (Arg0, Local2)
    ShiftLeft (Local2, 1, Local2)
    Or (Local2, Local1, bfService_Toggle)

    while (LNotEqual (bfIntAck, 1)) {
      ALIB_DEBUG ("--Wait Init Ack--")
    }

    while (LNotEqual (bfIntDone, 1)) {
      ALIB_DEBUG ("--Wait Init Done--")
    }

    ALIB_DEBUG ("GnbSmuServiceReq Exit")
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  SB port visability control
   *
   *  Arg0 - Smu service ID
   *
   */
  Method (procGnbSbPort, 1) {
    if (LEqual (Arg0, ENABLE)) {
      Store (0x0, bfNbSbCfgEn)
      Store (0x0, bfNbSbBrgEn)
    } else {
      Store (0x1, bfNbSbBrgEn)
      Store (0x1, bfNbSbCfgEn)
    }
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage Mem PS
   *
   *  
   *  Arg0 - ON/OFF
   *
   */    
   Method (procMemePSManage, 1) {
    Store (bfSwNbPstateLoDis, Local0)
    if (LEqual (Arg0, OFF)) {
      Store (0x1, bfSwNbPstateLoDis)
      ALIB_DEBUG (" Mem PS OFF!!!")
    } else {
      Store (0x0, bfSwNbPstateLoDis)
      ALIB_DEBUG (" Mem PS ON!!!")
    } 
   }

   Name (varBapmManageStatus, OFF)
   Name (varEnableBapm, 0) 

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage BAPM
   *
   *  
   *  Arg0 - AC/DC
   */    
    Method (procBapmManage, 1) {
      if (LEqual (varBapmManageStatus, OFF)) {
        if (LNotEqual (bfVidDid, 0xffffffff)) {
          Store (bfEnableBapm, varEnableBapm)
        }  
        Store (ON, varBapmManageStatus)
      }
      if (LEqual (varEnableBapm, 0x1)) {
        if (LEqual (Arg0, AC)) {
          // Enable BAPM on AC
        } else {
          //Disable BAPM on DC
          ALIB_DEBUG (" DC so disable BAPM")
        }
      }
    }    

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Gnb Ioapic
   *
   *  Arg0 - ON/OFF
   *  return previous status
   */
  Method (procGnbIoapicFeat, 1) {
    Store (bfGnbIoapicSb, Local0)
    if (LEqual (Arg0, OFF)) {
      Store (0x0, bfGnbIoapicSb)
    } else {
      Store (0x1, bfGnbIoapicSb)
    }

    return (Local0)
  }

