/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e \$Revision: 61089 $   @e \$Date: 2011-10-31 10:31:02 -0700 (Mon, 31 Oct 2011) $
 *
 */
/*
*****************************************************************************
*
* Copyright 2008 - 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
*
* AMD is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with AMD.  This header does *NOT* give you permission to use the Materials
* or any rights under AMD's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
*
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by AMD shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
*
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
*
* AMD does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by AMD, or
* result from use of the Materials or any related information.
*
* You agree that you will not reverse engineer or decompile the Materials.
*
* NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, AMD retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
*
* U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
* "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
* subject to the restrictions as set forth in FAR 52.227-14 and
* DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
* Government constitutes acknowledgement of AMD's proprietary rights in them.
*
* EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
* direct product thereof will be exported directly or indirectly, into any
* country prohibited by the United States Export Administration Act and the
* regulations thereunder, without the required authorization from the U.S.
* government nor will be used for any purpose prohibited by the same.
* ***************************************************************************
*
*/
  /*----------------------------------------------------------------------------------------*/
  /**
   *  Check if port support hotplug
   *
   *  Arg0 -  BDF
   */
  Method (procPcieIsPortHotplug, 1) {
    if (LNotEqual (LinkHotplug, 0x1)) {
      return (FALSE)
    }
    return (procPcieIsPort (Arg0))
  }


  /*----------------------------------------------------------------------------------------*/
  /**
   *  Hotplug
   *
   *  Arg0 -  ENABLE/DISABLE
   */

  Method (procPciePortHotplug, 1) {
    //
    // Disable ASPM on RC
    //
    Name (varPmControl, 0)
    Store (bfPmControl, varPmControl)
    Store (0, bfPmControl)
    //
    // Check if we plug in or unplug
    //
    if (LEqual (Arg0, ENABLE)) {
      Store (0, bfLinkDis)
      Store (LinkStateReleaseTraining ,Local0)
    } else {
      Store (procPcieEpPciDwRd (0, 4), Local0)
      if (LNotEqual (Local0, 0xFFFFFFFF)) {
        procPcieEpPciDwWr (0, 4, And (Local0, Not (0x4)))
        Store (procPcieEpPciDwRd (1, 4), Local0)
        if (LNotEqual (Local0, 0xFFFFFFFF)) {
          procPcieEpPciDwWr (1, 4, And (Local0, Not (0x4)))
        }
      }
      Store (1, bfLinkDis)
      Store (LinkStateDeviceNotPresent ,Local0)
    }
    while (LNotEqual (Local0, LinkStateTrainingCompleted)) {
      if (LEqual (Local0, LinkStateReleaseTraining)) {
        if (LGreater (PciePortAcSpeed, GEN1)) {
          Store (PciePortAcSpeed, PcieLocalOverrideSpeed)
          procPsppProcessState ()
        }
        //
        // Power ON PHY lane
        //
        GNBSCOPE.procGnbSmuPciePhyLanePowerControl (ON, StartPhyLane, EndPhyLane, PciePortMaxSpeed)
        //
        // Enable lanes in lane mux
        //
        procPcieLaneMuxControl (ON)
        //
        // Release training
        //
        Store (0, bfHoldTraining)
        //
        // Move to next state
        //
        Store (LinkStateCheckPresence, Local0)
      }
      //
      // Check device presence
      //
      if (LEqual (Local0, LinkStateCheckPresence)) {
        Store (0, Local1)
        Store (FALSE, Local2)
        while (LLess (Local1, 60)) {
          if (LGreater (bfLcCurrentState, 4)) {
            ALIB_DEBUG (" Device detected")
            Store (TRUE, Local2)
            break
          }
          Sleep (1)
          Increment (Local1)
        }
        if (LEqual (Local2, TRUE)) {
          Store (LinkStateDeviceDetected, Local0)
        } else {
          Store (LinkStateDeviceNotPresent, Local0)
        }
      }
      //
      // Device detected
      //
      if (LEqual (Local0, LinkStateDeviceDetected)) {
        Store (0, Local1)
        Store (FALSE, Local2)
        while (LLess (Local1, 80)) {
          if (LAnd (LGreaterEqual (bfLcCurrentState, 0x10), LLessEqual (bfLcCurrentState, 0x13))) {
            ALIB_DEBUG (" Device Present")
            Store (TRUE, Local2)
            break
          }
          Sleep (1)
          Increment (Local1)
        }
        if (LEqual (Local2, TRUE)) {
          Store (LinkStateL0, Local0)
        } else {
          if (LEqual (PcieLinkSafeMode, 0x1)) {
            Store (LinkStateDeviceNotPresent, Local0)
          } else {
            Store (LinkStateGen2Workaround, Local0)
          }
        }
      }
      //
      // Try GEN2 workaround
      //
      if (LEqual (Local0, LinkStateGen2Workaround)) {
        //
        // Set overrides for PSPP
        //
        Store (0x1, PcieLinkSafeMode)
        Store (GEN1, PcieLocalOverrideSpeed)
        //
        // Set link speed
        //
        procPcieProgramLinkSpeed (GEN1)

        if (CondRefOf (\_SB.ALIC, Local6)) {
          ALIB_DEBUG (" Call ALIC method")
          //Local1  contain port BDF
          Or (ShiftLeft (PciDev, 3), PciFun, Local1)
          \_SB.ALIC (Local1, 0)
          Sleep (2)
          \_SB.ALIC (Local1, 1)
          Store (LinkStateCheckPresence, Local0)
          continue
        }
        Store (LinkStateDeviceNotPresent, Local0)
      }
      //
      // Device not present
      //
      if (LEqual (Local0, LinkStateDeviceNotPresent)) {
        ALIB_DEBUG (" Device not Present")
        //
        // Dummy read to update link state
        //
        procPcieEpPciDwRd (0x0, 0x0)
        //
        //  Put training on hold
        //
        Store (1, bfHoldTraining)
        //
        // Disable lanes in lanemux
        //
        procPcieLaneMuxControl (OFF)
        //
        // Request PHY lane power off
        //
        GNBSCOPE.procGnbSmuPciePhyLanePowerControl (OFF, StartPhyLane, EndPhyLane, PciePortMaxSpeed)
        //
        // Remove overrides
        //
        Store (0x0, PcieLocalOverrideSpeed)
        Store (0x0, PcieLinkSafeMode)
        Store (0x0, PciePortRequest)
        //
        //  Return value
        //
        Store (0x0, Local2)
        //
        // Move to next state
        //
        Store (LinkStateTrainingCompleted, Local0)
      }
      //
      // Device in L0
      //
      if (LEqual (Local0, LinkStateL0)) {
        Store (0x1, Local2)
        Store (LinkStateTrainingCompleted, Local0)
      }
    }
    //
    // If link not in safe state no overrides needed
    //

    if (LEqual (PcieLinkSafeMode, 0x0)) {
      Store (0x0, PcieLocalOverrideSpeed)
    }
    if (LOr (LGreater (PciePortAcSpeed, GEN1), LEqual (PsppStatus, PSPP_START))) {
      if (LGreater (PsppPolicy, PSPP_POLICY_PERFORMANCE)) {
        if (LNotEqual (Arg0, DISABLE)) {  // if we got here due to "unplug" then skip training
          procPsppProcessState ()
        }
      }
    }
    //
    // restore ASPM on RC
    //
    Store (varPmControl, bfPmControl)
    return (Local2)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Lane mux control
   *
   *  Arg0 -  ON/OFF
   */
  Method (procPcieLaneMuxControl, 1) {
    if (LGreater (StartPhyLane, EndPhyLane)) {
      Subtract (StartPhyLane, EndPhyLane, Local0)
    } else {
      Subtract (EndPhyLane, StartPhyLane, Local0)
    }
    Increment (Local0)
    ShiftLeft (1, Local0, Local0)
    Decrement (Local0)
    ShiftLeft (Local0, StartCoreLane, Local0)
    if (LEqual (Arg0, ON)) {
      Or (bfLaneEnable, Local0, bfLaneEnable)
    } else {
      And (bfLaneEnable, Not (Local0), bfLaneEnable)
    }
  }
