/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e \$Revision: 61089 $   @e \$Date: 2011-10-31 10:31:02 -0700 (Mon, 31 Oct 2011) $
 *
 */
/*
*****************************************************************************
*
* Copyright 2008 - 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
*
* AMD is granting you permission to use this software (the Materials)
* pursuant to the terms and conditions of your Software License Agreement
* with AMD.  This header does *NOT* give you permission to use the Materials
* or any rights under AMD's intellectual property.  Your use of any portion
* of these Materials shall constitute your acceptance of those terms and
* conditions.  If you do not agree to the terms and conditions of the Software
* License Agreement, please do not use any portion of these Materials.
*
* CONFIDENTIALITY:  The Materials and all other information, identified as
* confidential and provided to you by AMD shall be kept confidential in
* accordance with the terms and conditions of the Software License Agreement.
*
* LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
* PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
* MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
* OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
* IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
* (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
* INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
* GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
* RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
* EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
* THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
*
* AMD does not assume any responsibility for any errors which may appear in
* the Materials or any other related information provided to you by AMD, or
* result from use of the Materials or any related information.
*
* You agree that you will not reverse engineer or decompile the Materials.
*
* NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
* further information, software, technical information, know-how, or show-how
* available to you.  Additionally, AMD retains the right to modify the
* Materials at any time, without notice, and is not obligated to provide such
* modified Materials to you.
*
* U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
* "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
* subject to the restrictions as set forth in FAR 52.227-14 and
* DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
* Government constitutes acknowledgement of AMD's proprietary rights in them.
*
* EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
* direct product thereof will be exported directly or indirectly, into any
* country prohibited by the United States Export Administration Act and the
* regulations thereunder, without the required authorization from the U.S.
* government nor will be used for any purpose prohibited by the same.
* ***************************************************************************
*
*/
  //-----------------------------------------------------------------
  // Transfer data
  //-----------------------------------------------------------------


  Name (PciePortMaxSpeed, 0)
  Name (PciePortDcSpeed,  0)
  Name (PciePortAcSpeed, 0)
  Name (PciePortCurSpeed, 0)
  Name (PcieSbPort, 0)
  Name (PcieLinkSafeMode, 0)
  Name (PcieLocalOverrideSpeed, 0)
  Name (StartPhyLane, 0)
  Name (EndPhyLane, 0)
  Name (StartCoreLane, 0)
  Name (EndCoreLane, 0)
  Name (PortId, 0)
  Name (LinkHotplug, 0)
  Name (PciDev, 0)
  Name (PciFun, 0)

  include ("PciePortRegisters.asl")

  include ("PcieRegisters.asl")
  //-----------------------------------------------------------------
  // Data
  //-----------------------------------------------------------------

  // Requested speed
  Name (PciePortRequest, 0x0)


  /*----------------------------------------------------------------------------------------*/
  /**
   *  Init data
   *
   *
   */
  Method (_INI, 0) {
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  0))), PciePortMaxSpeed)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  1))), PciePortAcSpeed)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  2))), PciePortDcSpeed)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  3))), PciePortCurSpeed)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  4))), PcieSbPort)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  5))), PcieLinkSafeMode)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  6))), PcieLocalOverrideSpeed)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  7))), StartPhyLane)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  8))), EndPhyLane)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase,  9))), StartCoreLane)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase, 10))), EndCoreLane)
    Store (PORTID, PortId)
    Store (DerefOf (Index (ALIBSCOPE.ADAT, Add (PortBase, 12))), LinkHotplug)
    Store (PCIDEV, PciDev)
    Store (PCIFUN, PciFun)
  }


  /*----------------------------------------------------------------------------------------*/
  /**
   *  Get port sped base on AC/Dc state
   *
   *
   */
  Method (procPcieGetPortTargetPolicySpeed, 0) {
    Store (procPsppGetAcDc (), Local0)
    if (LEqual (Local0, DC)) {
      return (PciePortDcSpeed)
    }
    if (LEqual (Local0, AC)) {
      return (PciePortAcSpeed)
    }
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Check if port request global overrides
   *
   *
   */
  Method (procPcieGetPortGlobalOverrideSpeed, 0) {
    if (LNotEqual (PciePortRequest, 0x0)) {
      if (LEqual (PciePortRequest, 1)) {
        return (GEN1)
      }
    }
    return (0)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Get port sped base on overrides
   *
   *
   */
  Method (procPcieGetPortLocalOverrideSpeed, 0) {
    if (LNotEqual (PcieLocalOverrideSpeed, 0)) {
      return (PcieLocalOverrideSpeed)
    }
    if (LGreater (PciePortRequest, 0x1)) {
      return (Subtract (PciePortRequest, 1))
    }
    return (0)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Get port target speed
   *
   *
   */
  Method (procPcieGetPortTargetSpeed, 0) {
    //
    // Policy stopped we need to apply max port speed
    //
    if (LEqual (ALIBSCOPE.PsppStatus, PSPP_STOP)) {
      if (LNotEqual(PcieLocalOverrideSpeed, 0)) {
        return (PcieLocalOverrideSpeed)
      }
      return (PciePortAcSpeed)
    }
    //
    // get speed base on override
    //
    Store (procPcieGetPortLocalOverrideSpeed (), Local0)
    if (LNotEqual (Local0, 0)) {
      if (LGreater (Local0, PciePortMaxSpeed)) {
        return (PciePortMaxSpeed)
      } else {
        return (Local0)
      }
    }
    //
    // Get speed base on regular policy
    //
    Store (procPcieGetPortTargetPolicySpeed (), Local0)
    //
    // Platform have global override
    //
    if (LNotEqual (ALIBSCOPE.PsppOverrideSpeed, 0)) {
      if (LLess (ALIBSCOPE.PsppOverrideSpeed, Local0)) {
        return (ALIBSCOPE.PsppOverrideSpeed)
      }
    }
    return (Local0)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Get port current speed
   *
   *
   */
  Method (procPcieGetPortCurrentSpeed, 0) {
    return (PciePortCurSpeed)
  }


  /*----------------------------------------------------------------------------------------*/
  /**
   *  Get port max speed
   *
   *
   */
  Method (procPcieGetMaxPortSpeed, 0) {
    return (PciePortMaxSpeed)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Request port speed change
   *
   *  Arg0 -  speed to be set
   */
  Method (procPcieRequestPortSpeed, 1) {
    ALIB_DEBUG (Concatenate (" PcieRequestPortSpeed Enter Speed: ", ToHexString (Arg0), ADBG))
    Store (Arg0, PciePortCurSpeed)
    //
    // Disable Enable access to SB port
    //
    if (LEqual(PcieSbPort, TRUE)) {
      GNBSCOPE.procGnbSbPort (ENABLE)
    }
    //
    // Set link speed
    //
    procPcieProgramLinkSpeed (Arg0)
    //
    // check if link alive
    //
    if (LGreaterEqual (bfLcCurrentState, 0x10)) {
      //
      // Special handling for registered ports
      //
      if (LNotEqual (PciePortRequest, 0)) {
        //Registered port
        Store (0x0, bfLcInitSpdChgWithCsrEn)
      } else {
        Store (0x1, bfLcInitSpdChgWithCsrEn)
      }
      //
      // Disable ASPM on EP
      //
      if (LEqual(PcieSbPort, 1)) {
        ALIBSCOPE.procSbAspm (DISABLE)
      } else {
        procPcieEpAspm (DISABLE)
      }
      //
      // Disable ASPM on RC
      //
      Name (varPmControl, 0)
      Store (bfPmControl, varPmControl)
      Store (0, bfPmControl)
      //
      // Retrain link to apply new link speed
      //    
      Store (TRUE, Local0)
      while (Local0) {
        Store (0x1, bfRetrainLink)
        Sleep (30)
        while (LEqual (bfLinkTraining, 0x1)) {
          Sleep (10)
        }
        if (LEqual(Arg0, GEN1)) {
          if (LEqual (bfLcCurrentDataRate, 0x0)) {
            break
          }
        } else {
          break
        }
      }
      //
      // Reenabel ASPM on RC
      //      
      Store (varPmControl, bfPmControl)
      //
      // Reenabel ASPM on EP
      //
      if (LEqual(PcieSbPort, 1)) {
        ALIBSCOPE.procSbAspm (ENABLE)
      } else {
        procPcieEpAspm (ENABLE)
      }
    }
    //
    // Hide SB port
    //
    if (LEqual(PcieSbPort, 1)) {
      GNBSCOPE.procGnbSbPort (DISABLE)
    }
    ALIB_DEBUG ("PcieRequestPortSpeed Exit")
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Set port request
   *
   *  Arg0 -  request data
   */
  Method (procPcieSetPortRequest, 1) {
    ALIB_DEBUG (Concatenate (" Set Request : ", ToHexString (Arg0), ADBG))
    Store (Arg0, PciePortRequest)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Check if BDF belongs to port
   *
   *  Arg0 -  Endpoint BDF
   */
  Method (procPcieIsPortChild, 1) {
    ShiftRight (Arg0, 8, Local0)
    if (LAnd (LGreaterEqual (Local0, bfSecondaryBus), LLessEqual (Local0, bfSubBusNumber))) {
      return (TRUE)
    }
    return (FALSE)
  }

 /*----------------------------------------------------------------------------------------*/
  /**
   *  Check if BDF is actual port address
   *
   *  Arg0 -  BDF
   */
  Method (procPcieIsPort, 1) {
    Or (PciFun, ShiftLeft (PciDev, 3), Local0)
    if (LEqual (Arg0, Local0)) {
      return (TRUE)
    }
    return (FALSE)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Check if BDF belongs to port
   *
   *  Arg0 -  request data
   */
  Method (procPcieSetBootState, 0) {
    Store (0, PciePortRequest)
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Program Link speed
   *
   *  Arg0 -  Speed
   */
  Method (procPcieProgramLinkSpeed, 1) {
    if (LGreaterEqual (Arg0, GEN2)) {
      Store (1, bfLcGen2EnStrap)
      Store (0, bfLcGen3EnStrap)
    }
    if (LGreaterEqual (Arg0, GEN3)) {
      Store (1, bfLcGen2EnStrap)
      Store (1, bfLcGen3EnStrap)
    }
    if (LEqual (Arg0, GEN1)) {
      Store (1, bfHwAutonomousSpeedDisable)
      Store (0, bfLcGen2EnStrap)
      Store (0, bfLcGen3EnStrap)
      Store (0, bfLcInitSpeedNegInL1En)
      if (LEqual (PcieLinkSafeMode, 1)) {
        Store (1, bfLcUpconfigureDis)
      }
    } else {
      Store (0, bfHwAutonomousSpeedDisable)
      Store (1, bfLcInitSpeedNegInL1En)
      Store (0, bfLcUpconfigureDis)
    }
    Store (Arg0, bfTargetLinkSpeed)
  }

#ifdef DEBUG_OUT
  /*----------------------------------------------------------------------------------------*/
  /**
   *  Program Link speed
   *
   *  Arg0 -  Speed
   */
  Method (procPcieDebugDump, 0) {
    ALIB_DEBUG ("--------------------------------------------------------")
    ALIB_DEBUG (Concatenate (" Device                 : ", ToHexString (PciDev), ADBG))
    ALIB_DEBUG (Concatenate (" Function               : ", ToHexString (PciFun), ADBG))
    ALIB_DEBUG (Concatenate (" PciePortAcSpeed        : ", ToHexString (PciePortAcSpeed), ADBG))
    ALIB_DEBUG (Concatenate (" PciePortMaxSpeed       : ", ToHexString (PciePortMaxSpeed), ADBG))
    ALIB_DEBUG (Concatenate (" PciePortAcSpeed        : ", ToHexString (PciePortAcSpeed), ADBG))
    ALIB_DEBUG (Concatenate (" PciePortDcSpeed        : ", ToHexString (PciePortDcSpeed), ADBG))
    ALIB_DEBUG (Concatenate (" PciePortCurSpeed       : ", ToHexString (PciePortCurSpeed), ADBG))
    ALIB_DEBUG (Concatenate (" PcieSbPort             : ", ToHexString (PcieSbPort), ADBG))
    ALIB_DEBUG (Concatenate (" PcieLinkSafeMode       : ", ToHexString (PcieLinkSafeMode), ADBG)) 
    ALIB_DEBUG (Concatenate (" PcieLocalOverrideSpeed : ", ToHexString (PcieLocalOverrideSpeed), ADBG)) 
    ALIB_DEBUG (Concatenate (" StartPhyLane           : ", ToHexString (StartPhyLane), ADBG)) 
    ALIB_DEBUG (Concatenate (" EndPhyLane             : ", ToHexString (EndPhyLane), ADBG)) 
    ALIB_DEBUG (Concatenate (" StartCoreLane          : ", ToHexString (StartCoreLane), ADBG)) 
    ALIB_DEBUG (Concatenate (" EndCoreLane            : ", ToHexString (EndCoreLane), ADBG)) 
    ALIB_DEBUG (Concatenate (" PortId                 : ", ToHexString (PortId), ADBG)) 
    ALIB_DEBUG (Concatenate (" LinkHotplug            : ", ToHexString (LinkHotplug), ADBG)) 
    ALIB_DEBUG ("--------------------------------------------------------")
  }

#endif

  include ("PcieEndpoint.asl")

#if HOTPLUG_SUPPORT
  include ("PciePortHotplug.asl")
#endif

