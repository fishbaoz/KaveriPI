/* $NoKeywords:$ */
/**
 * @file
 *
 * AMD CPM Display Feature SSDT Table
 *
 * Contains CPM code to provide ATRM function in ASL.
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:      CPM
 * @e sub-project:  DisplayFeature
 * @e \$Revision: 281158 $   @e \$Date: 2013-12-17 20:36:04 -0600 (Tue, 17 Dec 2013) $
 *
 */
/*****************************************************************************
 *
 * Copyright 2012 - 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
 *
 * AMD is granting you permission to use this software (the Materials)
 * pursuant to the terms and conditions of your Software License Agreement
 * with AMD.  This header does *NOT* give you permission to use the Materials
 * or any rights under AMD's intellectual property.  Your use of any portion
 * of these Materials shall constitute your acceptance of those terms and
 * conditions.  If you do not agree to the terms and conditions of the Software
 * License Agreement, please do not use any portion of these Materials.
 *
 * CONFIDENTIALITY:  The Materials and all other information, identified as
 * confidential and provided to you by AMD shall be kept confidential in
 * accordance with the terms and conditions of the Software License Agreement.
 *
 * LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
 * PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
 * MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
 * OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
 * IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
 * (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
 * INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
 * GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
 * RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
 * EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
 * THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
 *
 * AMD does not assume any responsibility for any errors which may appear in
 * the Materials or any other related information provided to you by AMD, or
 * result from use of the Materials or any related information.
 *
 * You agree that you will not reverse engineer or decompile the Materials.
 *
 * NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
 * further information, software, technical information, know-how, or show-how
 * available to you.  Additionally, AMD retains the right to modify the
 * Materials at any time, without notice, and is not obligated to provide such
 * modified Materials to you.
 *
 * U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
 * "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
 * subject to the restrictions as set forth in FAR 52.227-14 and
 * DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
 * Government constitutes acknowledgement of AMD's proprietary rights in them.
 *
 * EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
 * direct product thereof will be exported directly or indirectly, into any
 * country prohibited by the United States Export Administration Act and the
 * regulations thereunder, without the required authorization from the U.S.
 * government nor will be used for any purpose prohibited by the same.
 ******************************************************************************
 */

//***************************************************************************
//
//  ATRM.asi
//
//***************************************************************************

    // This reserved memory is used for ATRM method access to the special pre-posted
    // pcie discrete Gfx device video BIOS image for PowerXpress
    // OperationRegion REVD is modified by the BIOS POST code.
    // BIOS POST code updates the OFFSET and length of this operationRegion
    // with the Video ROM image address and length respectively.
    //

    // Maximum size of the VGA Buffer for ATRM method (patched in POST)
    Name(CpmVbiosBuffer,Buffer(0xFF00) {0})

    // Due to some problem found in Vista OS with accessing the Methods under VGA
    // Device object for Secondary Graphics, AMD PowerXpress team decided
    // to implement our own special private method (which Vista allows under VGA Device)
    // that emulates the OS defined _ROM method. It is private Method(ATRM, ...)
    // due to the OS version would expect the Video Rom image for THIS device
    // rather than (in this case) the secondary (Discrete PCIE) device.
    // This control method returns the special pre-posted Discrete PCIE Gfx
    // BIOS ROM image to the OS Video Driver.
    // Note that XTRM will get renamed to ATRM only when cmosGraphicsFeatures ==
    // PowerXpress or HCF-iGPU is enabled. When either of those features is not enabled,
    // then this method is default named to unrecognized XTRM.

    Method(XTRM,2,Serialized)
    {
        Add(Arg0, Arg1, Local0)
        Store(CpmAtrmRomSize, Local4)
        If (LGreater(Local4, 0xFF00))
        {
            Store(0xFF00, Local4)
        }
        If(LLessEqual(Local0, Local4))
        {
            Multiply(Arg1, 8, Local1)           // Actual length in bits.
            Multiply(Arg0, 8, Local2)           // Bit index to start on.
            Store(CpmAtrmRomImage, CpmVbiosBuffer)

            CreateField(CpmVbiosBuffer, Local2, Local1, Temp)
            Name(RETB, Buffer(Arg1) { })
            Store(Temp, RETB)
            Return(RETB)
        } Else
        {
            If(LLess(Arg0, Local4))
            {
                // Total bytes to return in this case = SROM -Arg0.
                Subtract(CpmAtrmRomSize, Arg0, Local3)
                Multiply(Local3, 8, Local1)     // Actual length in bits.
                Multiply(Arg0, 8, Local2)       // Bit index to start on.
                Store(CpmAtrmRomImage, CpmVbiosBuffer)
                CreateField(CpmVbiosBuffer, Local2, Local1, Tem)
                Name(RETC, Buffer(Local3) { })
                Store(Tem, RETC)
                Return(RETC)
            } Else
            {
                // It is not possible to return zero BYTE buffer because
                // some Windows OS AML interpreter crashes so this code
                // is returning 1 BYTE buffer.
                Name(RETD, Buffer(1) {})        // Return 1 BYTE buffer
                Return(RETD)
            } // END of internal Else
        } // END of Else
    } // END of ATI Special ROM method implementation (ATRM)
