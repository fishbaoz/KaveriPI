/* $NoKeywords:$ */
/**
 * @file
 *
 * AMD CPM Display Feature SSDT Table
 *
 * Contains CPM code to provide ATCS function in ASL.
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:      CPM
 * @e sub-project:  DisplayFeature
 * @e \$Revision: 281158 $   @e \$Date: 2013-12-17 20:36:04 -0600 (Tue, 17 Dec 2013) $
 *
 */
/*****************************************************************************
 *
 * Copyright 2012 - 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
 *
 * AMD is granting you permission to use this software (the Materials)
 * pursuant to the terms and conditions of your Software License Agreement
 * with AMD.  This header does *NOT* give you permission to use the Materials
 * or any rights under AMD's intellectual property.  Your use of any portion
 * of these Materials shall constitute your acceptance of those terms and
 * conditions.  If you do not agree to the terms and conditions of the Software
 * License Agreement, please do not use any portion of these Materials.
 *
 * CONFIDENTIALITY:  The Materials and all other information, identified as
 * confidential and provided to you by AMD shall be kept confidential in
 * accordance with the terms and conditions of the Software License Agreement.
 *
 * LIMITATION OF LIABILITY: THE MATERIALS AND ANY OTHER RELATED INFORMATION
 * PROVIDED TO YOU BY AMD ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY OF ANY KIND, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
 * MERCHANTABILITY, NONINFRINGEMENT, TITLE, FITNESS FOR ANY PARTICULAR PURPOSE,
 * OR WARRANTIES ARISING FROM CONDUCT, COURSE OF DEALING, OR USAGE OF TRADE.
 * IN NO EVENT SHALL AMD OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES WHATSOEVER
 * (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS
 * INTERRUPTION, OR LOSS OF INFORMATION) ARISING OUT OF AMD'S NEGLIGENCE,
 * GROSS NEGLIGENCE, THE USE OF OR INABILITY TO USE THE MATERIALS OR ANY OTHER
 * RELATED INFORMATION PROVIDED TO YOU BY AMD, EVEN IF AMD HAS BEEN ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGES.  BECAUSE SOME JURISDICTIONS PROHIBIT THE
 * EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES,
 * THE ABOVE LIMITATION MAY NOT APPLY TO YOU.
 *
 * AMD does not assume any responsibility for any errors which may appear in
 * the Materials or any other related information provided to you by AMD, or
 * result from use of the Materials or any related information.
 *
 * You agree that you will not reverse engineer or decompile the Materials.
 *
 * NO SUPPORT OBLIGATION: AMD is not obligated to furnish, support, or make any
 * further information, software, technical information, know-how, or show-how
 * available to you.  Additionally, AMD retains the right to modify the
 * Materials at any time, without notice, and is not obligated to provide such
 * modified Materials to you.
 *
 * U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with
 * "RESTRICTED RIGHTS." Use, duplication, or disclosure by the Government is
 * subject to the restrictions as set forth in FAR 52.227-14 and
 * DFAR252.227-7013, et seq., or its successor.  Use of the Materials by the
 * Government constitutes acknowledgement of AMD's proprietary rights in them.
 *
 * EXPORT ASSURANCE:  You agree and certify that neither the Materials, nor any
 * direct product thereof will be exported directly or indirectly, into any
 * country prohibited by the United States Export Administration Act and the
 * regulations thereunder, without the required authorization from the U.S.
 * government nor will be used for any purpose prohibited by the same.
 ******************************************************************************
 */

//***************************************************************************
//
//  ATCS.asi - AMD Chipset ACPI Control Method
//
//***************************************************************************

    Name(CpmAtcsBuffer0, Buffer(255){})
    Name(CpmAtcsBuffer1, Buffer(3){})
    Name(CpmDockingStatus, 1)

    Method (ATCS, 2 ,Serialized)
    {
        If(LEqual(Arg0, 0))
        {
            ATC0()
        }
        If(LEqual(Arg0, 1))
        {
            ATC1()
        }
        If(LEqual(Arg0, 2))
        {
            ATC2(Arg1)
        }
        If(LEqual(Arg0, 3))
        {
            ATC3()
        }
        If(LEqual(Arg0, 4))
        {
            ATC4(Arg1)
        }
        Return (CpmAtcsBuffer0)
    }

    // Verify Interface
    Method (ATC0)
    {
        CreateWordField(CpmAtcsBuffer0, 0, CpmStructureSize)                          // Structure size field
        CreateWordField(CpmAtcsBuffer0, 2, CpmInterfaceVersion)                       // Interface field
        CreateDWordField(CpmAtcsBuffer0, 4, CpmSupportedFunctionsBitVector)           // Supported field
        Store(8, CpmStructureSize)                                          // Size
        Store(1, CpmInterfaceVersion)                                       // Interface version
        Store(0x0F, CpmSupportedFunctionsBitVector)                         // Func 1, 2, 3, 4 supported
        Store(\_SB.ALIB(0, CpmAtcsBuffer1), CpmAtcsBuffer0)
    }

    // Get External State
    Method (ATC1, 0, Serialized)
    {
        CreateWordField(CpmAtcsBuffer0, 0, CpmStructureSize)                          // Structure size field
        CreateDWordField(CpmAtcsBuffer0, 2, CpmValidFlagsMask)                        // Valid Flags Mask field
        CreateDWordField(CpmAtcsBuffer0, 6, CpmFlags)                                 // Flags field
        CreateField(CpmAtcsBuffer0, 48, 1, CpmDockingFlag)                            // Docking status

        Store(10, CpmStructureSize)                                         // size
        Store(1, CpmValidFlagsMask)                                         // Valid Flags Mask
        Store(CpmAtcsSupportedFunctionMask, CpmFlags)                       // Clean up

        Store(CpmReadTable(CpmDisplayFeatureTable, CpmDisplayFeatureDockingDeviceId), Local0)

        If(And(Local0, 0x80))
        {
            Store(And(Local0, 0x01), CpmDockingStatus)
        } Else
        {
            If(And(Local0, 0x7F))
            {
                Store(CpmGetDeviceStatus(Local0), CpmDockingStatus)
            }
        }
        Store(CpmDockingStatus, CpmDockingFlag)
    }

    // PCIe Performace Request
    Method (ATC2, 1, Serialized)
    {
        CreateWordField(CpmAtcsBuffer0, 0, CpmStructureSize)          // Structure size field
        CreateByteField(CpmAtcsBuffer0, 2, CpmReturnValue)            // Return Values

        Store(3, CpmStructureSize)                          // prepare return default:size
        Store(1, CpmReturnValue)                            // assume Request refused
        Store(\_SB.ALIB(2, Arg0), CpmAtcsBuffer0)                     // ALIB's PCIe Performance Request
    }

    // PCIE Device Ready Nodification
    Method (ATC3, 0, Serialized)
    {
        CreateWordField(CpmAtcsBuffer0, 0, CpmStructureSize)          // Structure size field
        CreateByteField(CpmAtcsBuffer0, 2, CpmReturnValue)            // Return Values

        CreateWordField(CpmAtcsBuffer1, 0, CpmStructureSize2)         // Structure size field
        CreateByteField(CpmAtcsBuffer1, 2, CpmPsppPolicy)             // PSPP Policy

        Store(3, CpmStructureSize)                          // prepare return default:size
        Store(1, CpmReturnValue)                            // assume Request refused
        Store(3, CpmStructureSize2)                         // size
        Store(1, CpmPsppPolicy)                             // start PSPP
        Store(\_SB.ALIB(3, CpmAtcsBuffer1), CpmAtcsBuffer0)                     // ALIB's PCIe Performance Request
    }

   // Set PCIe Bus Width
    Method (ATC4, 1, Serialized)
    {
        CreateWordField(CpmAtcsBuffer0, 0, CpmStructureSize)          // Structure size field
        CreateByteField(CpmAtcsBuffer0, 2, CpmActiveLaneNumber)       // Number of active lanes

        Store(3, CpmStructureSize)                          // prepare return default: size
        Store(1, CpmActiveLaneNumber)                       // prepare return default: Num Lanes
        Store(\_SB.ALIB(4, Arg0), CpmAtcsBuffer0)           // ALIB's Set PCIe Bus width
    }
